#!/usr/bin/env ruby

# Copyright (c) 2012 Ryan J. Geyer
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'trollop'
require 'json'

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'transcode_consumer'))

opts = Trollop::options do
  banner = "A simple worker for a batch video transcoding grid application"

  opt :amqp_host, "A hostname for the AMQP server", :type => :string, :required => true
  opt :amqp_username, "A username to authenticate with the AMQP server", :type => :string
  opt :amqp_password, "A password to authenticate with the AMQP server", :type => :string
  opt :input_queue_name, "The name of the input queue on the AMQP server", :default => 'encode_input'
  opt :output_queue_name, "The name of the output queue on the AMQP server", :default => 'encode_output'
  opt :error_queue_name, "The name of the error queue on the AMQP server", :default => 'encode_error'
  opt :log_level, "The ruby logger logging level", :default => 'info'
  opt :gstorage_bucket, "The name of the Google Storage bucket where the source video files reside", :type => :string, :required => true
end

worker_opts = opts

worker_opts[:user] = opts[:amqp_username] if opts[:amqp_username]
worker_opts[:pass] = opts[:amqp_password] if opts[:amqp_password]

worker_opts[:logger] = Logger.new("/var/log/transcode_consumer-#{$$}.log")

case opts[:log_level]
  when 'info'
    worker_opts[:logger].level = Logger::INFO
  when 'error'
    worker_opts[:logger].level = Logger::ERROR
  when 'debug'
    worker_opts[:logger].level = Logger::DEBUG
  when 'fatal'
    worker_opts[:logger].level = Logger::FATAL
  when 'warn'
    worker_opts[:logger].level = Logger::WARN
  else
    worker_opts[:logger].level = Logger::INFO
end

worker = RGeyer::TranscodeConsumer.new(opts[:amqp_host], opts[:gstorage_bucket], worker_opts)

while true
  if worker.do_job
    worker_opts[:logger].info("Successfully processed a transcoding job")
  else
    worker_opts[:logger].info("No jobs available in the input queue, waiting 10 seconds before trying again")
    # TODO: Incremental backoff here makes sense?
    # TODO: Maybe have some elegant way to die? Accept a signal? Check a lock file?
    Kernel.sleep(10)
  end
end